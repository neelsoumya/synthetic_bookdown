[["generating-data-using-simstudy-methods.html", "Chapter 5 Generating data using simstudy methods", " Chapter 5 Generating data using simstudy methods In this chapter we will look at how to generate synthetic data on the server side using DataSHIELD functions Again we need to build a login object for the server that holds the data: builder &lt;- DSI::newDSLoginBuilder() # hide credentials builder$append(server=&quot;server1&quot;, url=&quot;https://opal-sandbox.mrc-epid.cam.ac.uk&quot;, user=&quot;dsuser&quot;, password=&quot;password&quot;, table = &quot;DASIM.DASIM1&quot;) logindata &lt;- builder$build() And then we establish a connection to the server: library(DSOpal) ## Loading required package: opalr ## Loading required package: httr ## Loading required package: DSI ## Loading required package: progress ## Loading required package: R6 if(exists(&quot;connections&quot;)){ datashield.logout(conns = connections) } connections &lt;- datashield.login(logins=logindata, assign = TRUE) ## ## Logging into the collaborating servers ## ## No variables have been specified. ## All the variables in the table ## (the whole dataset) will be assigned to R! ## ## Assigning table data... This method builds on the fundamentals of the simstudy package. There is a good introduction to this package here. First we load the library library(&quot;simstudy&quot;) library(&quot;dsBaseClient&quot;) Then we can extract some parameters from the real data using DataSHIELD commands and use these to generate our synthetic data. There are some variables that we expect to be normally distributed, so we will extract the mean and standard deviation: columns = c(&quot;LAB_TSC&quot;, &quot;LAB_TRIG&quot;, &quot;LAB_HDL&quot;, &quot;LAB_GLUC_FASTING&quot;, &quot;PM_BMI_CONTINUOUS&quot;) means = numeric() sds = numeric() for (var in columns){ means = c(means, ds.mean(paste0(&quot;D$&quot;,var), datasources = connections)$Mean.by.Study[1]) sds = c(sds, ds.var(paste0(&quot;D$&quot;,var), datasources = connections)$Variance.by.Study[1]^0.5) } We can obtain the correlation matrix from DataSHIELD: corrs = ds.cor(x=&quot;D&quot;, datasources = connections)[[1]]$`Correlation Matrix` Dnames = ds.colnames(&quot;D&quot;)$server1 colnames(corrs) &lt;- Dnames rownames(corrs) &lt;- Dnames And use the correlation matrix and the properties of the normally distributed data to generate simulated data for them: dt &lt;- genCorData(1000, mu = means, sigma = sds, corMatrix = corrs[c(1:5), c(1:5)]) "]]
